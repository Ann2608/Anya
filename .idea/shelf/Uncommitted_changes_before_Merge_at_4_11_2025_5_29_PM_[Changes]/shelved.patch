Index: Assets/Script/Anya/AnyaMv.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.UI;\r\nusing UnityEngine.UIElements;\r\n\r\npublic class AnyaMv : MonoBehaviour\r\n{\r\n    public Animator Anim;\r\n    public Rigidbody2D rg;\r\n    public BoxCollider2D Box;\r\n    public ParticleSystem SpeedFX;      // ParticleSystem: hiệu ứng hạt\r\n\r\n    private float Speed = 0;\r\n\r\n    [Header(\"Speed\")]\r\n    public float MvSpeed;\r\n    private float Speedboost = 1f;\r\n\r\n    [Header(\"Interact\")]\r\n    [SerializeField] private GameObject NoteUI;\r\n    [SerializeField] private Text NoteText;\r\n    private bool CanInteract = false;       // kiểm tra xem người chơi có ở gần không\r\n    private string NoteContent;\r\n\r\n    public float JumpHigh;\r\n    private float move;\r\n    //public Text WinText;\r\n\r\n    //private bool DangLeoTuong;\r\n    //[SerializeField] private float SpeedLeoTuong;\r\n\r\n    //[SerializeField] private Transform WallCheck;\r\n    //[SerializeField] private LayerMask WallLayer;\r\n    //[SerializeField] private AudioClip JumpSound;\r\n\r\n    private bool IsFacingRight = true;\r\n    public bool IsGround;\r\n\r\n    void Start()\r\n    {\r\n        rg = GetComponent<Rigidbody2D>();\r\n        Anim = GetComponent<Animator>();\r\n        Box = GetComponent<BoxCollider2D>();\r\n        SpeedItem.OnSpeedChange += Startspeedboost;\r\n        NoteUI.SetActive(false);\r\n    }\r\n\r\n    void Startspeedboost(float mutiplyer)       // mutiplyer là giá trị của Speedboost tức là giá trị tăng tốc\r\n    {\r\n        StartCoroutine(SpeedboostCouroutine(mutiplyer));\r\n    }\r\n\r\n    private IEnumerator SpeedboostCouroutine(float mutiplyer)\r\n    {\r\n        Speedboost = mutiplyer;\r\n        SpeedFX.Play();\r\n        yield return new WaitForSeconds(2f);\r\n        Speedboost = 1f;\r\n        SpeedFX.Stop();\r\n    }\r\n    public void Update()\r\n    {\r\n        Anim.SetFloat(\"Speed\", Speed);\r\n        Anim.SetBool(\"IsGround\", IsGround);\r\n        move = Input.GetAxisRaw(\"Horizontal\");\r\n        Movement(move);\r\n\r\n        if (Input.GetButtonDown(\"Jump\") && IsGround)\r\n        {\r\n            Jump();\r\n        }\r\n        if (Input.GetKeyDown(KeyCode.E) && CanInteract)\r\n        {\r\n            StartCoroutine(ShowNote());\r\n        }\r\n        //LeoTuong();\r\n    }\r\n    IEnumerator ShowNote()\r\n    {\r\n        NoteText.text = NoteContent;\r\n        NoteUI.SetActive(true);\r\n        yield return new WaitForSeconds(5f);\r\n        NoteUI.SetActive(false);\r\n    }\r\n\r\n    public void SetNoteContent(string content)\r\n    {\r\n        NoteContent = content;          // nội dung của Note\r\n        CanInteract = true;\r\n    }\r\n\r\n    void Movement(float move)       // giá trị move từ -1 đến 1\r\n    {\r\n        rg.velocity = new Vector2(MvSpeed * move * Speedboost, rg.velocity.y);\r\n        Speed = Mathf.Abs(MvSpeed * move * Speedboost);\r\n\r\n        // Kiểm tra đổi hướng\r\n        if (IsFacingRight && move < 0 || !IsFacingRight && move > 0)\r\n        {\r\n            Flip();\r\n        }\r\n    }\r\n\r\n    void Jump()\r\n    {\r\n        rg.velocity = new Vector2(rg.velocity.x, JumpHigh);\r\n        Anim.SetBool(\"IsJumping\", true);\r\n        //SoundManager.instance.PlaySound(JumpSound);\r\n    }\r\n    public void JumpOff()\r\n    {\r\n        Anim.SetBool(\"IsJumping\", false);\r\n    }\r\n\r\n    //private bool IsLeoTuong()\r\n    //{\r\n    //    return Physics2D.OverlapCircle(WallCheck.position, 0.2f, WallLayer);\r\n    //}\r\n\r\n    //private void LeoTuong()\r\n    //{\r\n    //    if (IsLeoTuong() && !IsGround && move != 0f)\r\n    //    {\r\n    //        DangLeoTuong = true;\r\n    //        rg.velocity = new Vector2(rg.velocity.x, Mathf.Clamp(rg.velocity.y, -SpeedLeoTuong, float.MaxValue));\r\n    //    }\r\n    //}\r\n    void Flip()\r\n    {\r\n        IsFacingRight = !IsFacingRight;\r\n        Vector3 X = transform.localScale;\r\n        X.x *= -1;\r\n        transform.localScale = X;\r\n        if (SpeedFX != null)\r\n        {\r\n            Vector3 fxScale = SpeedFX.transform.localScale;\r\n            fxScale.x = Mathf.Abs(fxScale.x) * (IsFacingRight ? 1 : -1); // (IsFacingRight ? 1 : -1) xác định dấu của scale X dựa trên hướng nhân vật (dương nếu sang phải, âm nếu sang trái).\r\n            // Mathf.Abs(fxScale.x) : lấy giá trị tuyệt đối của X, không thay đổi kích thước\r\n            // dấu ? là toán tử 3 ngôi xác định true hoặc false\r\n            SpeedFX.transform.localScale = fxScale;\r\n        }\r\n    }\r\n    private void OnCollisionStay2D(Collision2D collision)\r\n    {\r\n        IsGround = true;\r\n    }\r\n\r\n    private void OnCollisionExit2D(Collision2D collision)\r\n    {\r\n        IsGround = false;\r\n    }\r\n    public bool CanAtk()\r\n    {\r\n        return move == 0 && IsGround == true;\r\n    }\r\n    //private void OnTriggerEnter2D(Collider2D collision)\r\n\r\n    //{\r\n    //    if (collision.CompareTag(\"Win\"))\r\n    //    {\r\n    //        WinText.gameObject.SetActive(true);\r\n    //        Time.timeScale = 0;\r\n    //    }\r\n    //}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Script/Anya/AnyaMv.cs b/Assets/Script/Anya/AnyaMv.cs
--- a/Assets/Script/Anya/AnyaMv.cs	(revision 090bf153dc7a955554d448308c39ced9222d5473)
+++ b/Assets/Script/Anya/AnyaMv.cs	(date 1744367313091)
@@ -92,7 +92,7 @@
 
     void Movement(float move)       // giá trị move từ -1 đến 1
     {
-        rg.velocity = new Vector2(MvSpeed * move * Speedboost, rg.velocity.y);
+        rg.linearVelocity = new Vector2(MvSpeed * move * Speedboost, rg.linearVelocity.y);
         Speed = Mathf.Abs(MvSpeed * move * Speedboost);
 
         // Kiểm tra đổi hướng
@@ -104,7 +104,7 @@
 
     void Jump()
     {
-        rg.velocity = new Vector2(rg.velocity.x, JumpHigh);
+        rg.linearVelocity = new Vector2(rg.linearVelocity.x, JumpHigh);
         Anim.SetBool("IsJumping", true);
         //SoundManager.instance.PlaySound(JumpSound);
     }
Index: Assets/Script/Enemy/SoldierShieldAttack.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\n\r\npublic class SoldierShieldAttack : MonoBehaviour\r\n{\r\n    [SerializeField] private float AtkCoolDown;\r\n    [SerializeField] private int Dmg;\r\n    [SerializeField] private float Range;\r\n    [SerializeField] private float ColliderDistance;        //độ rộng của Collider\r\n    [SerializeField] GameObject ProjectedPrefab;\r\n    [SerializeField] private Transform ShootPoint;\r\n    [SerializeField] private float bulletSpeed;\r\n    //[SerializeField] private AudioClip SwordSound;\r\n    private float CoolDownTimer = Mathf.Infinity;\r\n    Rigidbody2D rg;\r\n    Animator Anim;\r\n    public BoxCollider2D Box;\r\n    public LayerMask playerlayer;\r\n    private AnyaHealth PlayerHealth;\r\n\r\n    private SoldierShieldIdle EneMv;\r\n    void Start()\r\n    {\r\n        rg = GetComponent<Rigidbody2D>();\r\n        Anim = GetComponent<Animator>();\r\n        EneMv = GetComponentInParent<SoldierShieldIdle>();\r\n    }\r\n    void Update()\r\n    {\r\n        CoolDownTimer += Time.deltaTime;\r\n        if (PlayerSight())\r\n        {\r\n            if (CoolDownTimer >= AtkCoolDown && PlayerHealth.CurrentHealth > 0)\r\n            {\r\n                CoolDownTimer = 0;\r\n                Anim.SetTrigger(\"Atk\");\r\n                //SoundManager.instance.PlaySound(SwordSound);\r\n            }\r\n        }\r\n        if (EneMv != null)\r\n        {\r\n            EneMv.enabled = !PlayerSight();         // di chuyển nếu người chơi không trong tầm nhìn\r\n        }\r\n    }\r\n    private bool PlayerSight()      //tấn công khi người chơi trong tầm nhìn\r\n    {\r\n        RaycastHit2D hit = Physics2D.BoxCast(Box.bounds.center + transform.right * Range * transform.localScale.x * ColliderDistance,\r\n            new Vector3(Box.bounds.size.x * Range, Box.bounds.size.y, Box.bounds.size.z), 0, Vector2.left, 0, playerlayer);\r\n        if (hit.collider != null)\r\n        {\r\n            PlayerHealth = hit.transform.GetComponent<AnyaHealth>();\r\n        }\r\n\r\n        return hit.collider != null;\r\n    }\r\n    private void OnDrawGizmos()\r\n    {\r\n        Gizmos.color = Color.red;\r\n        Gizmos.DrawWireCube(Box.bounds.center + transform.right * Range * transform.localScale.x * ColliderDistance,\r\n            new Vector3(Box.bounds.size.x * Range, Box.bounds.size.y, Box.bounds.size.z));\r\n    }\r\n    private void ShootBullet()\r\n    {\r\n        if (PlayerSight()) // Chỉ bắn nếu người chơi trong tầm nhìn\r\n        {\r\n            // Tạo viên đạn tại ShootPoint\r\n            GameObject bullet = Instantiate(ProjectedPrefab, ShootPoint.position, ShootPoint.rotation);\r\n            Rigidbody2D bulletRb = bullet.GetComponent<Rigidbody2D>();\r\n\r\n            float direction = Mathf.Sign(transform.localScale.x); // 1 nếu quay phải, -1 nếu quay trái\r\n\r\n            // Bắn thẳng theo trục ngang (Vector2.right là trục x)\r\n            bulletRb.velocity = new Vector2(direction * bulletSpeed, 0f); // Bắn thẳng, không có thành phần y\r\n\r\n            Vector3 bulletScale = bullet.transform.localScale;\r\n            bulletScale.x = Mathf.Abs(bulletScale.x) * direction; // Lật ngang dựa trên hướng\r\n            bullet.transform.localScale = bulletScale;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Script/Enemy/SoldierShieldAttack.cs b/Assets/Script/Enemy/SoldierShieldAttack.cs
--- a/Assets/Script/Enemy/SoldierShieldAttack.cs	(revision 090bf153dc7a955554d448308c39ced9222d5473)
+++ b/Assets/Script/Enemy/SoldierShieldAttack.cs	(date 1744367313091)
@@ -71,7 +71,7 @@
             float direction = Mathf.Sign(transform.localScale.x); // 1 nếu quay phải, -1 nếu quay trái
 
             // Bắn thẳng theo trục ngang (Vector2.right là trục x)
-            bulletRb.velocity = new Vector2(direction * bulletSpeed, 0f); // Bắn thẳng, không có thành phần y
+            bulletRb.linearVelocity = new Vector2(direction * bulletSpeed, 0f); // Bắn thẳng, không có thành phần y
 
             Vector3 bulletScale = bullet.transform.localScale;
             bulletScale.x = Mathf.Abs(bulletScale.x) * direction; // Lật ngang dựa trên hướng
